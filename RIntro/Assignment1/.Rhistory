setnames(dt1.ranked,i.Event.Name,Event.Name)
setnames(dt1.ranked,i.Event.Name,"Event.Name")
View(dt1.ranked)
View(dt1.ranked)
dt1.ranked <- rankedEntireFileEvents.table[dt1, roll=TRUE]
names(dt1.ranked)
dt1.ranked$Event.Name <-NULL
setnames(dt1.ranked,i.Event.Name,"Event.Name")
names(dt1.ranked)
setnames(dt1.ranked,"i.Event.Name","Event.Name")
names(dt1.ranked)
dt1[is.na(fileEventIndex)]
dt1.ranked[is.na(fileEventIndex)]
dt1.ranked[is.na(fileEventIndex),fileEventIndex]=0
dt1.ranked[fileEventIndex,is.na(fileEventIndex)]
dt1.ranked[is.na(fileEventIndex)]
dt1.ranked[is.na(fileEventIndex),fileEventIndex]
dt1.ranked[is.na(fileEventIndex),fileEventIndex] = 0
dt1.ranked[is.na(fileEventIndex),fileEventIndex]
dt1.ranked[is.na(fileEventIndex),fileEventIndex] <- 0
dt1.ranked[is.na(fileEventIndex),fileEventIndex]
dt2.ranked <- rankedEntireFileEvents.table[dt2, roll=TRUE]
View(dt2.ranked)
View(dt2.ranked)
dat <- structure(list(doy = c(320, 350, 309, 310, 328, 321, 301, 338,
304, 304, 308), year = structure(1:11, .Label = c("2000", "2001",
"2002", "2003", "2004", "2005", "2006", "2007", "2008", "2009",
"2010"), class = "factor"), conc = c("2000-320", "2001-350",
"2002-309", "2003-310", "2004-328", "2005-321", "2006-301", "2007-338",
"2008-304", "2009-304", "2010-308")), row.names = c(NA, -11L), class = "data.frame", .Names = c("doy",
"year", "conc"))
rm(dd)
rm(ddd)
rm(fpl_2004)
rm(sampdf)
View(dat)
summary(dat)
as.numeric(dat$year)
as.numeric(as.character(dat$year))
as.numeric(as.character(dat$year)) + dat$doy
as.Date("2012-05-05") + 5
dat$conc
as.Date(as.character(dat$year) "-01-01") + dat$doy - 1
as.Date( paste(as.character(dat$year), "-01-01",sep="") + dat$doy - 1
as.Date( paste(as.character(dat$year), "-01-01",sep=""))
as.Date( paste(as.character(dat$year), "-01-01",sep="")) + dat$doy - 1
x <- c(1,3,4,7,8)
y <- c(4,2,1)
plot.ts(x)
lines(y)
y2<-c(NA,4,2,1,NA)
lines(y2,col="blue")
y.df <- data.frame(x=c(3,4,7), y=c(4,2,1))
plot(y~x,yd.f)
plot(y~x,data=yd.f)
plot(y~x, y.df)
plot(y~x, y.df,"o")
plot.ts(x)
lines(y~x, y.df)
plot.ts(x)
lines(y~x, y.df)
lines(y~x, y.df,col=2)
y.df <- data.frame(t=c(3,4,7), y=c(4,2,1))
lines(y~t, y.df,col=2)
lines(y~t, y.df,col=3)
prod(1,1)
?prod
prod(c(2,3,3,4,5,.2))
log(2.3)
structure(c(-0.003703704, 0.038104089, -0.000895255, -0.002389486, 0.00988024, 0.00889416, 0.002514368, 0.020781082, 0.002457002, -0.023459384, 0.019361778, 0.004220893, -0.048253968, 0.105737158, 0.04147813, -0.03070239, 0.039593605, 0.033774073, -0.002636625, 0.020908435, -0.003766478, -0.002126654, 0.004972768, 0.005655042, -0.003175947, 0.013169074, -0.01572327, 0.003833866, 0.00466794, -0.004223865, 0.010963195, -0.004802479, -0.005292653, -0.003286385, 0.011775789, 0.000310366, 0.002399232, 0.038774533, -0.014746544, -0.004209542, 0.039924847, -0.004968383, 0.029471545, -0.000987167, -0.005928854, -0.005964215, 0.007, -0.002979146, 0.005352645, 0.002818666, 0, -0.00843223, 0.004724409, -0.005642633, -0.013913043, 0.005291005, 0.026315789, 0.015384615, -0.03030303, 0.029513889, 0.076259947, -0.017868145, -0.010037641, 0.002534854, -0.003792668, -0.021573604, 0.037435657, 0.00947226, -0.023235031, 0.005032022, -0.017296313, -0.004168597, 0.020424195, 0.056197075, 0.021137026, -0.017130621, -0.007262164, 0.00658376, -0.014313598, -0.027062706, 0.05156038, 0.059354839, -0.018879415, 0.037243948, 0, 0.009724257, -0.00171504, -0.021540901, 0.014721772, -0.012777852), class = c("xts", "zoo"), .indexCLASS = "Date", tclass = "Date", .indexTZ = "UTC", tzone = "UTC", index = structure(c(1073001600, 1073260800, 1073347200, 1073433600, 1073520000, 1073606400), tzone = "UTC", tclass = "Date"), .Dim = c(6L, 15L), .Dimnames = list(NULL, c("WTI", "BRENT", "NATGAS", "GOLD", "SILVER", "ALUM", "COPPER", "CORN", "SOY", "SUGAR", "WHEAT", "LHOG", "ARACOF", "COCOA", "COT")))
<-structure(c(-0.003703704, 0.038104089, -0.000895255, -0.002389486, 0.00988024, 0.00889416, 0.002514368, 0.020781082, 0.002457002, -0.023459384, 0.019361778, 0.004220893, -0.048253968, 0.105737158, 0.04147813, -0.03070239, 0.039593605, 0.033774073, -0.002636625, 0.020908435, -0.003766478, -0.002126654, 0.004972768, 0.005655042, -0.003175947, 0.013169074, -0.01572327, 0.003833866, 0.00466794, -0.004223865, 0.010963195, -0.004802479, -0.005292653, -0.003286385, 0.011775789, 0.000310366, 0.002399232, 0.038774533, -0.014746544, -0.004209542, 0.039924847, -0.004968383, 0.029471545, -0.000987167, -0.005928854, -0.005964215, 0.007, -0.002979146, 0.005352645, 0.002818666, 0, -0.00843223, 0.004724409, -0.005642633, -0.013913043, 0.005291005, 0.026315789, 0.015384615, -0.03030303, 0.029513889, 0.076259947, -0.017868145, -0.010037641, 0.002534854, -0.003792668, -0.021573604, 0.037435657, 0.00947226, -0.023235031, 0.005032022, -0.017296313, -0.004168597, 0.020424195, 0.056197075, 0.021137026, -0.017130621, -0.007262164, 0.00658376, -0.014313598, -0.027062706, 0.05156038, 0.059354839, -0.018879415, 0.037243948, 0, 0.009724257, -0.00171504, -0.021540901, 0.014721772, -0.012777852), class = c("xts", "zoo"), .indexCLASS = "Date", tclass = "Date", .indexTZ = "UTC", tzone = "UTC", index = structure(c(1073001600, 1073260800, 1073347200, 1073433600, 1073520000, 1073606400), tzone = "UTC", tclass = "Date"), .Dim = c(6L, 15L), .Dimnames = list(NULL, c("WTI", "BRENT", "NATGAS", "GOLD", "SILVER", "ALUM", "COPPER", "CORN", "SOY", "SUGAR", "WHEAT", "LHOG", "ARACOF", "COCOA", "COT")))
a<-structure(c(-0.003703704, 0.038104089, -0.000895255, -0.002389486, 0.00988024, 0.00889416, 0.002514368, 0.020781082, 0.002457002, -0.023459384, 0.019361778, 0.004220893, -0.048253968, 0.105737158, 0.04147813, -0.03070239, 0.039593605, 0.033774073, -0.002636625, 0.020908435, -0.003766478, -0.002126654, 0.004972768, 0.005655042, -0.003175947, 0.013169074, -0.01572327, 0.003833866, 0.00466794, -0.004223865, 0.010963195, -0.004802479, -0.005292653, -0.003286385, 0.011775789, 0.000310366, 0.002399232, 0.038774533, -0.014746544, -0.004209542, 0.039924847, -0.004968383, 0.029471545, -0.000987167, -0.005928854, -0.005964215, 0.007, -0.002979146, 0.005352645, 0.002818666, 0, -0.00843223, 0.004724409, -0.005642633, -0.013913043, 0.005291005, 0.026315789, 0.015384615, -0.03030303, 0.029513889, 0.076259947, -0.017868145, -0.010037641, 0.002534854, -0.003792668, -0.021573604, 0.037435657, 0.00947226, -0.023235031, 0.005032022, -0.017296313, -0.004168597, 0.020424195, 0.056197075, 0.021137026, -0.017130621, -0.007262164, 0.00658376, -0.014313598, -0.027062706, 0.05156038, 0.059354839, -0.018879415, 0.037243948, 0, 0.009724257, -0.00171504, -0.021540901, 0.014721772, -0.012777852), class = c("xts", "zoo"), .indexCLASS = "Date", tclass = "Date", .indexTZ = "UTC", tzone = "UTC", index = structure(c(1073001600, 1073260800, 1073347200, 1073433600, 1073520000, 1073606400), tzone = "UTC", tclass = "Date"), .Dim = c(6L, 15L), .Dimnames = list(NULL, c("WTI", "BRENT", "NATGAS", "GOLD", "SILVER", "ALUM", "COPPER", "CORN", "SOY", "SUGAR", "WHEAT", "LHOG", "ARACOF", "COCOA", "COT")))
a
summary(a)
?dput
set.seed(8760)
k <- c(rep(1:4, each = 6))
i <- paste(rep(LETTERS[1:6], times=4))
value <- sample(1:10000, 24)
input <- data.frame(k, i, value)
u_n <- unique(input$i)
id <- unique(input$k)
View(input)
doConversion <- function(x){
stopifnot(class(x) %in% c("data.frame","matrix") &
names(x) == c("k","i","value"))
# get technology name and temporal id
u_n <- unique(x$i)
id <- unique(x$k)
# initialise data.frame containing all zeros and the right names
nodata <- data.frame(setNames(replicate(length(u_n),numeric(length(id)), simplify = F), u_n))
data <- cbind(id, nodata)
# assign values to particular entries of the data.frame
for (i in colnames(data[, 2:ncol(data)])){
for (j in id){
if(length(rownames(x[which(x$i == i & x$k == j) , ])==0)){
help <- x[which(x$i == i & x$k == j), "value"]
data[which(data$id == j) ,i ] <- help
}
}
}
return(data)
}
r <- doConversion(input)
head(r)
library(reshape)
cast(melt(input),k~i,sum)
cast(melt(input,measure.vars="value"),k~i,sum)
r
read.table("soinput.csv",sep=c(",","="))
read.table("c:/users/jason/documents/soinput.csv",sep=c(",","="))
read.table("c:/users/jbrown/documents/soinput.csv",sep=c(",","="))
read.table("c:/users/jbrown/documents/soinput.csv",sep=c(",","="),colClasses="character")
strsplit(a,split="=")
strsplit(a$V1,split="=")
summary(a)
a<-read.table("c:/users/jbrown/documents/soinput.csv",sep=c(",","="),colClasses="character")
strsplit(a$V1,split="=")
strsplit(a,split="=")
strsplit(a$V4,split="=")
ncol(a)
a
input<-read.table("c:/users/jbrown/documents/soinput.csv",sep=c(",","="),colClasses="character")
strsplit(input$V4,split="=")
output<-data.frame()
input$V7
length(input$V7)
q<-strsplit(input$V4,split="=")
q[1]
q[,1]
q[.,]
q[2]
q
letters
df <- data.frame(Keyword=letters[1:4],V1=c(0.7,rep(NA,3),V2=c(NA,NA,0.2,NA),V3=c(NA,0.5,NA,NA))
df <- data.frame(Keyword=letters[1:4],V1=c(0.7,rep(NA,3)),V2=c(NA,NA,0.2,NA),V3=c(NA,0.5,NA,NA))
df
is.na(df[,2:4])
is.na(df[,2:4])[1]
which.max(is.na(df[,2:4]))
which.max(is.na(df[,2:4]))
library(data.table)
DB1 <- data.frame(orderItemID  = c(1,2,3,4,5,6,7,8,9,10),
orderDate = c("1.1.12","1.1.12","1.1.12","1.1.12","1.1.12", "1.1.12","1.1.12","1.1.12","2.1.12","2.1.12"),
itemID = c(2,3,2,5,12,4,2,3,1,5),
size = factor(c("l", "s", "xl", "xs","m", "s", "l", "m", "xxs", "xxl")),
color = factor(c("blue", "black", "blue", "orange", "red", "navy", "red", "purple", "white", "black")),
customerID = c(33, 15, 1, 32, 14, 55, 33, 78, 94, 23))
dt1<- as.data.table(DB1)
merge(DB1,DB1,by.x=("customer.ID","itemID"))
merge(DB1,DB1,by=("customer.ID","itemID"))
merge(DB1,DB1,by=("customerID","itemID"))
merge(x=DB1,y=DB1,by=("customerID","itemID"))
?merge
merge(x=DB1,y=DB1,by=c("customerID","itemID"))
m<- merge(x=DB1,y=DB1,by=c("customerID","itemID"))
sapply(m$orderItemID.x,function(sum(m$orderItemId.x==X)))
sapply(m$orderItemID.x,function(x) sum(m$orderItemId.x==X)))
sapply(m$orderItemID.x,function(x) sum(m$orderItemId.x==X))
sapply(m$orderItemID.x,function(X) sum(m$orderItemId.x==X))
sum(m$orderItemId.x==X
sum(m$orderItemId.x==X)
sum(m$orderItemId.x==3)
sum(m$orderItemId.x=='3')
sum(m$orderItemId.x=="3")
sum(m$orderItemId.x==4)
sum(m$orderItemId.x==7)
m$orderItemId.x==7
m$orderItemId.x
sapply(m$orderItemID.x,function(X) sum(m$orderItemID.x==X))
m$selection.order<-sapply(m$orderItemID.x,function(X) sum(m$orderItemID.x==X))
View(m)
m$selection.order<-sapply(m$orderItemID.x,function(X) sum(m$orderItemID.x==X)) > 1
View(m)
m <- m[,c("orderItemID.x","selection.order")]
View(m)
merge(dt1, m, by.x="orderItemID",by.y="orderItemID.x",all.x=TRUE)
merge(dt1, m, by.x="orderItemID",by.y="orderItemID.x",all.x=TRUE)
merge(DB1, m, by.x="orderItemID",by.y="orderItemID.x",all.x=TRUE)
merge(DB1, m, by.x="orderItemID",by.y="orderItemID.x",all.x=TRUE,all.y=FALSE)
DB1
m
distinct
unique
unique(m)
merge(DB1, unique(m), by.x="orderItemID",by.y="orderItemID.x",all.x=TRUE,all.y=FALSE)
dput(sampdf)
b<-read.table("C:/users/jbrown/downloads/data.txt")
b<-read.table("C:/users/jbrown/downloads/data.txt")
b<-read.table("C:/users/jbrown/downloads/data.txt",header=TRUE,sep=" ")
b<-read.table("C:/users/jbrown/downloads/data.txt",header=TRUE,sep=" ")
b
b<-read.table("C:/users/jbrown/downloads/data.txt",header=TRUE,sep=" ")
b
b<-read.table("C:/users/jbrown/downloads/data.txt", header=TRUE,sep=" ")
b<-read.table("C:/users/jbrown/downloads/data.txt", header=TRUE,sep=" ")
b<-read.table("C:/users/jbrown/downloads/data.txt", header=TRUE,sep=" ")
b<-read.table("C:/users/jbrown/downloads/data.txt", header=TRUE,sep=" ")
b<-read.table("C:/users/jbrown/downloads/data.txt", header=TRUE,sep=" ")
b<-read.table("C:/users/jbrown/downloads/data.txt", header=TRUE,sep=" ")
b<-read.table("C:/users/jbrown/downloads/data.txt", header=TRUE,sep=" ")
b<-read.table("C:/users/jbrown/downloads/data.txt", header=TRUE,sep=" ")
b<-read.table("C:/users/jbrown/downloads/data.txt", header=TRUE,sep=" ")
b
b<-read.table("C:/users/jbrown/downloads/data.txt", header=TRUE,sep=" ",strip.white=TRUE)
b
b<-read.table("C:/users/jbrown/downloads/data.txt", header=TRUE,sep="")# ",strip.white=TRUE)"
b
df<- data.frame(x=c(1,2,3,4,5,6,7,8),)
df<- data.frame(x=c(1,2,3,4,5,6,7,8),y=c(2,3,5,6,7,8,9))
df
df<- data.frame(x=c(1,2,3,4,5,6,7,8),y=c(2,3,5,6,7,8,9,10))
df
sum(subset(df,y>5))$x
sum(subset(df,y>5)$x)
lapply
?lapply
df
as.list(df)
t(as.list(df))
t(as.matrix(df))
df
df$y<-4:12
df$y<-4:11
df
sum(df$x)
as.matrix(df)
as.list(df)
library(plyr)
ddply(df)
df<- data.frame(a=rnorm(100),b=rnorm(200))
df$a[c(2,23,24)]<-NA
summary(df)
df$b[c(7,12,63,74)]<-NA
summary(df)
as.matrix(df)
round(as.matrix(df),3)
as.data.frame(round(as.matrix(df),3))
b<-as.data.frame(round(as.matrix(df),3))
class(b)
odd
odd
?odd
??odd
rep(1:4,each=4)
df<- data.frame(a=rnorm(100),b=rnorm(100),c=rnorm(100),d=rnorm(100))
df<- data.frame(a=rnorm(100),b=rnorm(100),c=rnorm(100),d=rnorm(100),
e=rnorm(100),f=rnorm(100))
is.even(3)
is.even<- function(x) x%% 2 == 0
is.even(1:10)
plot(x = as.vector(df[!is.even(1:ncol(df))]),
y = as.vector(df[is.even(1:ncol(df))]),
col=rep(1:ncol(df),each=nrow(df)))
as.vector(df[!is.even(1:ncol(df))])
vector(df[!is.even(1:ncol(df))])
c(df[!is.even(1:ncol(df))])
as.vector(df[!is.even(1:ncol(df))]
)
unlist(df[!is.even(1:ncol(df))])
plot(x = unlist(df[!is.even(1:ncol(df))]),
y = unlist(df[is.even(1:ncol(df))]),
col=rep(1:ncol(df),each=nrow(df)))
rep(1:ncol(df),each=nrow(df))
rep(1:ncol(df/2),each=2*nrow(df))
rep(1:ncol(df)/2,each=2*nrow(df))
x = unlist(df[!is.even(1:ncol(df))]
)
length(x)
rep(1:(ncol(df)/2),each=2*nrow(df))
plot(x = unlist(df[!is.even(1:ncol(df))]),
y = unlist(df[is.even(1:ncol(df))]),
col=rep(1:(ncol(df)/2),each=2*nrow(df)))
plot(x = unlist(df[!is.even(1:ncol(df))]),
y = unlist(df[is.even(1:ncol(df))]),
col=1+rep(1:(ncol(df)/2),each=2*nrow(df)))
plot(x = unlist(df[!is.even(1:ncol(df))]),
y = unlist(df[is.even(1:ncol(df))]),
col=1+rep(1:(ncol(df)/2),each=2*nrow(df)))
unlist(df[is.even(1:ncol(df))]
)
ncol(df)
x
length(x)
rep(1:(ncol(df)/2),each=2*nrow(df))
1:(ncol(df)/2)
plot(x = unlist(df[!is.even(1:ncol(df))]),
y = unlist(df[is.even(1:ncol(df))]),
col=1+rep(1:(ncol(df)/2),each=nrow(df)))
df<- data.frame(a=rnorm(100,2,1),b=rnorm(100,2,1),c=rnorm(100,-2,1),d=rnorm(100,-2,1),
e=rnorm(100),f=rnorm(100))
#first define a function for even/odd
is.even<- function(x) x%% 2 == 0
#the plot coerces the odd and even columns into single vectors
#note they must be of the same type
plot(x = unlist(df[!is.even(1:ncol(df))]),
y = unlist(df[is.even(1:ncol(df))]),
col=1+rep(1:(ncol(df)/2),each=nrow(df)))
df<- data.frame(a=rnorm(100,3,1),b=rnorm(100,-3,1),c=rnorm(100,-2,1),d=rnorm(100,-2,1),
e=rnorm(100),f=rnorm(100))
plot(x = unlist(df[!is.even(1:ncol(df))]),
y = unlist(df[is.even(1:ncol(df))]),
col=1+rep(1:(ncol(df)/2),each=nrow(df)))
seq(1,ncol(df),2)
summary(df)
dummary(dd)
class(dd)
seq(1,6,2)
seq(2,6,2)
View(fpl_2004.df)
plot(x = unlist(df[seq(1,ncol(df),2)]),
y = unlist(df[seq(2,ncol(df),2)]),
col=rep(1:(ncol(df)/2),each=nrow(df)))
df
df<- data.frame(a=rnorm(100,3,1),b=rnorm(100,-3,1),c=rnorm(100,-2,1),d=rnorm(100,-2,1),
e=rnorm(100),f=rnorm(100))
plot(x = unlist(df[seq(1,ncol(df),2)]),
y = unlist(df[seq(2,ncol(df),2)]),
col=rep(1:(ncol(df)/2),each=nrow(df)))
cor(df$a, df$b)
drr <- "C:/users/jbrown/source/repos/datasciencecoursera/rintro/assigment1/specdata/"
drr
paste(drr,"/",1:4,".csv",sep="")
paste(drr,1:4,".csv",sep="")
four <- read.csv(paste(drr,1:4,".csv",sep=""))
four <- lapply(paste(drr,1:4,".csv",sep=""), read.csv )
four <- read.csv(paste(drr,format(1:4,"000"),".csv",sep=""))
four <- lapply(paste(drr,format(1:4,"000"),".csv",sep=""), read.csv )
format(1:4,"000")
?format
str_pad(0)
sprintf("%03d",4)
sprintf("%03d",156)
sprintf("%03d",1565)
sprintf("%03d",15:24)
four <- lapply(paste(drr,sprintf("%03d",1:4),".csv",sep=""), read.csv )
drr <- "C:/users/jbrown/source/repos/datasciencecoursera/rintro/assignment1/specdata/"
four <- lapply(paste(drr,sprintf("%03d",1:4),".csv",sep=""), read.csv )
nrow(four)
nrow(four)
summary(four)
cbind(four)
filenames<-paste(drr,sprintf("%03d",1:4),".csv",sep="")
filenames
read.csv(filenames)
Date()
Date(0)
Date
thing<-data.frame(Date=structure(numeric(0),class="Date"),sulfate=numeric(0),nitrate=numeric(0),ID=numeric(0))
thing
four <- lapply(paste(drr,sprintf("%03d",1:4),".csv",sep=""), rbind(thing,read.csv(x)) )
four <- lapply(paste(drr,sprintf("%03d",1:4),".csv",sep=""), function(x) rbind(thing,read.csv(x)) )
four
summary(four)
four <- lapply(thing, function(x) rbind(thing,read.csv(x)) )
thing<-data.frame(Date=structure(numeric(0),class="Date"),sulfate=numeric(0),nitrate=numeric(0),ID=numeric(0))
four <- lapply(filenames, function(x) rbind(thing,read.csv(x)) )
thing<-data.frame(Date=structure(numeric(0),class="Date"),sulfate=numeric(0),nitrate=numeric(0),ID=numeric(0))
four <- lapply(filenames, function(x) rbind(thing,read.csv(x)) )
nrow(four)
summary(four)
four <- lapply(filenames, function(x) thing<-rbind(thing,read.csv(x)) )
nrow(four)
summary(four)
nrow(four[4])
nrow(four[[4])
nrow(four[[4]])
thing<-data.frame(Date=structure(numeric(0),class="Date"),sulfate=numeric(0),nitrate=numeric(0),ID=numeric(0))
path<- paste(drr,sprintf("%03d",filenum),".csv",sep="")
for (filenum in 1:4){
path<- paste(drr,sprintf("%03d",filenum),".csv",sep="")
thing<-rbind(thing,read.csv( path,colClasses=c("Date",rep("numeric",3)))
}
for (filenum in 1:4){
path<- paste(drr,sprintf("%03d",filenum),".csv",sep="")
thing<-rbind(thing,
read.csv( path,colClasses=c("Date",rep("numeric",3))))
}
thing<-data.frame(Date=structure(numeric(0),class="Date"),sulfate=numeric(0),nitrate=numeric(0),ID=numeric(0))
for (filenum in 1:4){
path<- paste(drr,sprintf("%03d",filenum),".csv",sep="")
thing<-rbind(thing,
read.csv( path,colClasses=c("Date",rep("numeric",3))))
}
thing<-data.frame(Date=structure(numeric(0),class="Date"),sulfate=numeric(0),nitrate=numeric(0),ID=numeric(0))
for (filenum in 1:4){
path<- paste(drr,sprintf("%03d",filenum),".csv",sep="")
thing<-rbind(thing,
read.csv( path,colClasses=c("Date",rep("numeric",3))))
}
View(thing)
summary(thing)
table(thing$ID)
mean(thing["s"])
mean(thing[["s"])
mean(thing[["s"]])
columnIWant <- "s"
mean(thing[[columnIWant]])
mean(thing[[columnIWant]],rm.na=T)
thing[[columnIWant]]
columnIWant <- "s"
thing[[columnIWant]]
thing[columnIWant]
mean(thing[[columnIWant]],rm.na=T)
thing[[columnIWant]]
columnIWant <- "s"
thing[["s"]]
mean(thing[[columnIWant,exact=F]],rm.na=T)
thing[[columnIWant,exact=F]]
mean(thing[[columnIWant,exact=F]],na.rm=T)
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
# Get the files read into a single data frame.
# first check if directory ends with /
data <-data.frame(Date=structure(numeric(0),class="Date"),sulfate=numeric(0),nitrate=numeric(0),ID=numeric(0))
for (filenum in id){
path<- paste(directory,sprintf("%03d",filenum),".csv",sep="")
data<-rbind(data,
read.csv( path,colClasses=c("Date",rep("numeric",3))))
}
return(mean(data[[pollutant,exact=F]],na.rm=T))
}
pollutantmean("specdata/","s",1:10)
pollutantmean("/specdata/","s",1:10)
pollutantmean("specdata/","s",1:10)
wkdir()
getwd()
setwd("~/Source/Repos/datasciencecoursera/RIntro/Assignment1")
pollutantmean("specdata/","s",1:10)
pollutantmean("specdata","s",1:10)
length(getwd())
pollutantmean("specdata","s",1:10)
pollutantmean("specdata/","s",1:10)
pollutantmean("specdata/","nitrate",23)
substr(drr, nchar(drr)-1,nchar(drr))
substr(drr, nchar(drr),nchar(drr))
if substr(drr, nchar(drr),nchar(drr)) == "/"
if( substr(drr, nchar(drr),nchar(drr)) == "/")
substr(drr, nchar(drr),nchar(drr)) == "/"
1!=9
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
# Get the files read into a single data frame.
# first check if directory ends with /
if(substr(directory, nchar(directory),nchar(directory))!="/"){
directory <- paste(directory,"/",sep="")
}
data <-data.frame(Date=structure(numeric(0),class="Date"),sulfate=numeric(0),nitrate=numeric(0),ID=numeric(0))
for (filenum in id){
path<- paste(directory,sprintf("%03d",filenum),".csv",sep="")
data<-rbind(data,
read.csv( path,colClasses=c("Date",rep("numeric",3))))
}
return(mean(data[[pollutant,exact=F]],na.rm=T))
}
pollutantmean("specdata","s",1:10)
pollutantmean("specdata/","nitrate",23)
pollutantmean("specdata","nitrate",70:72)
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
submit()
submit()
submit()
submit()
#Write a function named 'pollutantmean' that calculates the mean of a pollutant (sulfate or nitrate) across a specified list of monitors. The function 'pollutantmean' takes three arguments: 'directory', 'pollutant', and 'id'. Given a vector of monitor ID numbers, 'pollutantmean' reads those monitors' particulate matter data from the directory specified in the 'directory' argument and returns the mean of the pollutant across all of the monitors, ignoring any missing values coded as NA. A prototype of the function is as follows
readPollutionFiles <- function(directory, id=1:332){
# Get the files read into a single data frame.
# first check if directory ends with /
if(substr(directory, nchar(directory),nchar(directory))!="/"){
directory <- paste(directory,"/",sep="")
}
data <-data.frame(Date=structure(numeric(0),class="Date"),sulfate=numeric(0),nitrate=numeric(0),ID=numeric(0))
for (filenum in id){
path<- paste(directory,sprintf("%03d",filenum),".csv",sep="")
data<-rbind(data,
read.csv( path,colClasses=c("Date",rep("numeric",3))))
}
return(data)
}
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
data <- readPollutionFiles(directory,id)
return(mean(data[[pollutant,exact=F]],na.rm=T))
}
submit()
submit
partPromt
partPrompt
partPrompt
