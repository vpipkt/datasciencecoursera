length(input$V7)
q<-strsplit(input$V4,split="=")
q[1]
q[,1]
q[.,]
q[2]
q
letters
df <- data.frame(Keyword=letters[1:4],V1=c(0.7,rep(NA,3),V2=c(NA,NA,0.2,NA),V3=c(NA,0.5,NA,NA))
df <- data.frame(Keyword=letters[1:4],V1=c(0.7,rep(NA,3)),V2=c(NA,NA,0.2,NA),V3=c(NA,0.5,NA,NA))
df
is.na(df[,2:4])
is.na(df[,2:4])[1]
which.max(is.na(df[,2:4]))
which.max(is.na(df[,2:4]))
library(data.table)
DB1 <- data.frame(orderItemID  = c(1,2,3,4,5,6,7,8,9,10),
orderDate = c("1.1.12","1.1.12","1.1.12","1.1.12","1.1.12", "1.1.12","1.1.12","1.1.12","2.1.12","2.1.12"),
itemID = c(2,3,2,5,12,4,2,3,1,5),
size = factor(c("l", "s", "xl", "xs","m", "s", "l", "m", "xxs", "xxl")),
color = factor(c("blue", "black", "blue", "orange", "red", "navy", "red", "purple", "white", "black")),
customerID = c(33, 15, 1, 32, 14, 55, 33, 78, 94, 23))
dt1<- as.data.table(DB1)
merge(DB1,DB1,by.x=("customer.ID","itemID"))
merge(DB1,DB1,by=("customer.ID","itemID"))
merge(DB1,DB1,by=("customerID","itemID"))
merge(x=DB1,y=DB1,by=("customerID","itemID"))
?merge
merge(x=DB1,y=DB1,by=c("customerID","itemID"))
m<- merge(x=DB1,y=DB1,by=c("customerID","itemID"))
sapply(m$orderItemID.x,function(sum(m$orderItemId.x==X)))
sapply(m$orderItemID.x,function(x) sum(m$orderItemId.x==X)))
sapply(m$orderItemID.x,function(x) sum(m$orderItemId.x==X))
sapply(m$orderItemID.x,function(X) sum(m$orderItemId.x==X))
sum(m$orderItemId.x==X
sum(m$orderItemId.x==X)
sum(m$orderItemId.x==3)
sum(m$orderItemId.x=='3')
sum(m$orderItemId.x=="3")
sum(m$orderItemId.x==4)
sum(m$orderItemId.x==7)
m$orderItemId.x==7
m$orderItemId.x
sapply(m$orderItemID.x,function(X) sum(m$orderItemID.x==X))
m$selection.order<-sapply(m$orderItemID.x,function(X) sum(m$orderItemID.x==X))
View(m)
m$selection.order<-sapply(m$orderItemID.x,function(X) sum(m$orderItemID.x==X)) > 1
View(m)
m <- m[,c("orderItemID.x","selection.order")]
View(m)
merge(dt1, m, by.x="orderItemID",by.y="orderItemID.x",all.x=TRUE)
merge(dt1, m, by.x="orderItemID",by.y="orderItemID.x",all.x=TRUE)
merge(DB1, m, by.x="orderItemID",by.y="orderItemID.x",all.x=TRUE)
merge(DB1, m, by.x="orderItemID",by.y="orderItemID.x",all.x=TRUE,all.y=FALSE)
DB1
m
distinct
unique
unique(m)
merge(DB1, unique(m), by.x="orderItemID",by.y="orderItemID.x",all.x=TRUE,all.y=FALSE)
dput(sampdf)
b<-read.table("C:/users/jbrown/downloads/data.txt")
b<-read.table("C:/users/jbrown/downloads/data.txt")
b<-read.table("C:/users/jbrown/downloads/data.txt",header=TRUE,sep=" ")
b<-read.table("C:/users/jbrown/downloads/data.txt",header=TRUE,sep=" ")
b
b<-read.table("C:/users/jbrown/downloads/data.txt",header=TRUE,sep=" ")
b
b<-read.table("C:/users/jbrown/downloads/data.txt", header=TRUE,sep=" ")
b<-read.table("C:/users/jbrown/downloads/data.txt", header=TRUE,sep=" ")
b<-read.table("C:/users/jbrown/downloads/data.txt", header=TRUE,sep=" ")
b<-read.table("C:/users/jbrown/downloads/data.txt", header=TRUE,sep=" ")
b<-read.table("C:/users/jbrown/downloads/data.txt", header=TRUE,sep=" ")
b<-read.table("C:/users/jbrown/downloads/data.txt", header=TRUE,sep=" ")
b<-read.table("C:/users/jbrown/downloads/data.txt", header=TRUE,sep=" ")
b<-read.table("C:/users/jbrown/downloads/data.txt", header=TRUE,sep=" ")
b<-read.table("C:/users/jbrown/downloads/data.txt", header=TRUE,sep=" ")
b
b<-read.table("C:/users/jbrown/downloads/data.txt", header=TRUE,sep=" ",strip.white=TRUE)
b
b<-read.table("C:/users/jbrown/downloads/data.txt", header=TRUE,sep="")# ",strip.white=TRUE)"
b
df<- data.frame(x=c(1,2,3,4,5,6,7,8),)
df<- data.frame(x=c(1,2,3,4,5,6,7,8),y=c(2,3,5,6,7,8,9))
df
df<- data.frame(x=c(1,2,3,4,5,6,7,8),y=c(2,3,5,6,7,8,9,10))
df
sum(subset(df,y>5))$x
sum(subset(df,y>5)$x)
lapply
?lapply
df
as.list(df)
t(as.list(df))
t(as.matrix(df))
df
df$y<-4:12
df$y<-4:11
df
sum(df$x)
as.matrix(df)
as.list(df)
library(plyr)
ddply(df)
df<- data.frame(a=rnorm(100),b=rnorm(200))
df$a[c(2,23,24)]<-NA
summary(df)
df$b[c(7,12,63,74)]<-NA
summary(df)
as.matrix(df)
round(as.matrix(df),3)
as.data.frame(round(as.matrix(df),3))
b<-as.data.frame(round(as.matrix(df),3))
class(b)
odd
odd
?odd
??odd
rep(1:4,each=4)
df<- data.frame(a=rnorm(100),b=rnorm(100),c=rnorm(100),d=rnorm(100))
df<- data.frame(a=rnorm(100),b=rnorm(100),c=rnorm(100),d=rnorm(100),
e=rnorm(100),f=rnorm(100))
is.even(3)
is.even<- function(x) x%% 2 == 0
is.even(1:10)
plot(x = as.vector(df[!is.even(1:ncol(df))]),
y = as.vector(df[is.even(1:ncol(df))]),
col=rep(1:ncol(df),each=nrow(df)))
as.vector(df[!is.even(1:ncol(df))])
vector(df[!is.even(1:ncol(df))])
c(df[!is.even(1:ncol(df))])
as.vector(df[!is.even(1:ncol(df))]
)
unlist(df[!is.even(1:ncol(df))])
plot(x = unlist(df[!is.even(1:ncol(df))]),
y = unlist(df[is.even(1:ncol(df))]),
col=rep(1:ncol(df),each=nrow(df)))
rep(1:ncol(df),each=nrow(df))
rep(1:ncol(df/2),each=2*nrow(df))
rep(1:ncol(df)/2,each=2*nrow(df))
x = unlist(df[!is.even(1:ncol(df))]
)
length(x)
rep(1:(ncol(df)/2),each=2*nrow(df))
plot(x = unlist(df[!is.even(1:ncol(df))]),
y = unlist(df[is.even(1:ncol(df))]),
col=rep(1:(ncol(df)/2),each=2*nrow(df)))
plot(x = unlist(df[!is.even(1:ncol(df))]),
y = unlist(df[is.even(1:ncol(df))]),
col=1+rep(1:(ncol(df)/2),each=2*nrow(df)))
plot(x = unlist(df[!is.even(1:ncol(df))]),
y = unlist(df[is.even(1:ncol(df))]),
col=1+rep(1:(ncol(df)/2),each=2*nrow(df)))
unlist(df[is.even(1:ncol(df))]
)
ncol(df)
x
length(x)
rep(1:(ncol(df)/2),each=2*nrow(df))
1:(ncol(df)/2)
plot(x = unlist(df[!is.even(1:ncol(df))]),
y = unlist(df[is.even(1:ncol(df))]),
col=1+rep(1:(ncol(df)/2),each=nrow(df)))
df<- data.frame(a=rnorm(100,2,1),b=rnorm(100,2,1),c=rnorm(100,-2,1),d=rnorm(100,-2,1),
e=rnorm(100),f=rnorm(100))
#first define a function for even/odd
is.even<- function(x) x%% 2 == 0
#the plot coerces the odd and even columns into single vectors
#note they must be of the same type
plot(x = unlist(df[!is.even(1:ncol(df))]),
y = unlist(df[is.even(1:ncol(df))]),
col=1+rep(1:(ncol(df)/2),each=nrow(df)))
df<- data.frame(a=rnorm(100,3,1),b=rnorm(100,-3,1),c=rnorm(100,-2,1),d=rnorm(100,-2,1),
e=rnorm(100),f=rnorm(100))
plot(x = unlist(df[!is.even(1:ncol(df))]),
y = unlist(df[is.even(1:ncol(df))]),
col=1+rep(1:(ncol(df)/2),each=nrow(df)))
seq(1,ncol(df),2)
summary(df)
dummary(dd)
class(dd)
seq(1,6,2)
seq(2,6,2)
View(fpl_2004.df)
plot(x = unlist(df[seq(1,ncol(df),2)]),
y = unlist(df[seq(2,ncol(df),2)]),
col=rep(1:(ncol(df)/2),each=nrow(df)))
df
df<- data.frame(a=rnorm(100,3,1),b=rnorm(100,-3,1),c=rnorm(100,-2,1),d=rnorm(100,-2,1),
e=rnorm(100),f=rnorm(100))
plot(x = unlist(df[seq(1,ncol(df),2)]),
y = unlist(df[seq(2,ncol(df),2)]),
col=rep(1:(ncol(df)/2),each=nrow(df)))
cor(df$a, df$b)
datestring <- c("January 10, 2012 10:40","December 9, 2011 9:10")
x<-strptime(datestring,"%B %d, %Y %H:%M")
x
class(x)
x[2]
x[2]$day
unclass(x[2])
datestring <- c("January 10, 2012 10:40","December 9, 2011 19:10")
x<-strptime(datestring,"%B %d, %Y %H:%M")
x
class(x)
datestring <- c("January 10, 2012 10:40","December 29, 2011 19:10")
x<-strptime(datestring,"%B %d, %Y %H:%M")
class(x)
x
?strptime
x
class(x[1])
class(x[2])
setwd("~/Source/Repos/datasciencecoursera/RIntro/Assignment1")
readPollutionFiles <- function(directory, id=1:332){
# Get the files read into a single data frame.
# first check if directory ends with /
if(substr(directory, nchar(directory),nchar(directory))!="/"){
directory <- paste(directory,"/",sep="")
}
data <-data.frame(Date=structure(numeric(0),class="Date"),sulfate=numeric(0),nitrate=numeric(0),ID=numeric(0))
for (filenum in id){
path<- paste(directory,sprintf("%03d",filenum),".csv",sep="")
data<-rbind(data,
read.csv( path,colClasses=c("Date",rep("numeric",3))))
}
return(data)
}
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
data <- readPollutionFiles(directory,id)
return(mean(data[[pollutant,exact=F]],na.rm=T))
}
?complete.cases
d <- readPollutionFiles("specdata")
summary(d)
sapply(1:4,function(x) complete.cases(subset(d,id==x)))
sapply(1:4,function(x) complete.cases(subset(d,ID==x)))
sapply(1:4,function(x) sum(complete.cases(subset(d,ID==x))))
complete <- function(directory, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return a data frame of the form:
## id nobs
## 1  117
## 2  1041
## ...
## where 'id' is the monitor ID number and 'nobs' is the
## number of complete cases
data <- readPollutionFiles(directory,id)
#compute the complete cases per id
return(data.frame(id=id,
nobs = sapply(id,
function(x) sum(complete.cases(subset(d,ID==x))))
}
complete <- function(directory, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return a data frame of the form:
## id nobs
## 1  117
## 2  1041
## ...
## where 'id' is the monitor ID number and 'nobs' is the
## number of complete cases
data <- readPollutionFiles(directory,id)
#compute the complete cases per id
return(data.frame(id=id,
nobs = sapply(id,
function(x) sum(complete.cases(subset(d,ID==x))))))
}
complete("specdata",c(4:7,99:102))
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
submit()
6
submit()
submit()
submit()
comp <- complete("specdata",c(4:7,99:102))
monitors <- subset(comp, nobs > threshold)$id
threshold=80
monitors <- subset(comp, nobs > threshold)$id
threshold=0
monitors <- subset(comp, nobs > threshold)$id
monitors
threshold=0
monitors <- subset(comp, nobs > threshold)$id
monitors
comp
threshold=425
monitors <- subset(comp, nobs > threshold)$id
monitors
cor(comp$sulfate,comp$nitrate)
cor(d$sulfate,d$nitrate)
cor(d$sulfate,d$nitrate,na.rm=TRUE)
cor(d$sulfate,d$nitrate,na.rm=TRUE)
cor(d$sulfate,d$nitrate)
cor(d$sulfate,d$nitrate,use="all.obs")
cor(d$sulfate,d$nitrate,use="complete.obs")
monitors
sapply(monitors, function(x){
dd<-subset(d,id==x)
return(cor(dd$sulfate,dd$nitrate,use="complete.obs"))
}
)
d
sapply(monitors, function(x){
dd<-subset(d,ID==x)
return(cor(dd$sulfate,dd$nitrate,use="complete.obs"))
}
)
threshold=400
monitors <- subset(comp, nobs > threshold)$id
monitors
sapply(monitors, function(x){
dd<-subset(d,ID==x)
return(cor(dd$sulfate,dd$nitrate,use="complete.obs"))
}
)
threshold=1000
monitors <- subset(comp, nobs > threshold)$id
monitors
sapply(monitors, function(x){
dd<-subset(d,ID==x)
return(cor(dd$sulfate,dd$nitrate,use="complete.obs"))
}
)
numeric(0)
numeric()
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
id = 1:332
data <- readPollutionFiles(directory,id)
#adapt complete function
complete <- data.frame(id=id,
nobs = sapply(id,
function(x) sum(complete.cases(subset(d,ID==x)))))
monitors <- subset(complete, nobs > threshold)$id
if(length(monitors)==0)
return numeric()
return(sapply(monitors, function(x){
dd<-subset(data,ID==x)
return(cor(dd$sulfate,dd$nitrate,use="complete.obs"))
}
)
}
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
id = 1:332
data <- readPollutionFiles(directory,id)
#adapt complete function
complete <- data.frame(id=id,
nobs = sapply(id,
function(x) sum(complete.cases(subset(d,ID==x)))))
monitors <- subset(complete, nobs > threshold)$id
if(length(monitors)==0)
return numeric()
return(sapply(monitors, function(x){
dd<-subset(data,ID==x)
return(cor(dd$sulfate,dd$nitrate,use="complete.obs"))
}
))
}
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
id = 1:332
data <- readPollutionFiles(directory,id)
#adapt complete function
complete <- data.frame(id=id,
nobs = sapply(id,
function(x) sum(complete.cases(subset(d,ID==x)))))
monitors <- subset(complete, nobs > threshold)$id
if(length(monitors)==0)
return numeric()
return(sapply(monitors, function(x){
dd<-subset(data,ID==x)
return(cor(dd$sulfate,dd$nitrate,use="complete.obs"))
}
))
}
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
id = 1:332
data <- readPollutionFiles(directory,id)
#adapt complete function
complete <- data.frame(id=id,
nobs = sapply(id,
function(x) sum(complete.cases(subset(d,ID==x)))))
monitors <- subset(complete, nobs > threshold)$id
if(length(monitors)==0)
return numeric()
cor.function <- function(x){
dd<-subset(data,ID==x)
return(cor(dd$sulfate,dd$nitrate,use="complete.obs"))
}
return(sapply(monitors, cor.function))
}
f
summary(dd)
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
id = 1:332
data <- readPollutionFiles(directory,id)
#adapt complete function
complete <- data.frame(id=id,
nobs = sapply(id,
function(x) sum(complete.cases(subset(d,ID==x)))))
monitors <- subset(complete, nobs > threshold)$id
if(length(monitors)==0)
return numeric()
cor.function <- function(x){
dd<-subset(data,ID==x)
return(cor(dd$sulfate,dd$nitrate,use="complete.obs"))
}
return(sapply(monitors, cor.function))
}
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
id = 1:332
data <- readPollutionFiles(directory,id)
#adapt complete function
complete <- data.frame(id=id,
nobs = sapply(id,
function(x) sum(complete.cases(subset(d,ID==x)))))
monitors <- subset(complete, nobs > threshold)$id
if(length(monitors)==0) return numeric(0)
cor.function <- function(x){
dd<-subset(data,ID==x)
return(cor(dd$sulfate,dd$nitrate,use="complete.obs"))
}
return(sapply(monitors, cor.function))
}
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
id = 1:332
data <- readPollutionFiles(directory,id)
#adapt complete function
complete <- data.frame(id=id,
nobs = sapply(id,
function(x) sum(complete.cases(subset(d,ID==x)))))
monitors <- subset(complete, nobs > threshold)$id
if(length(monitors)==0) return(numeric())
cor.function <- function(x){
dd<-subset(data,ID==x)
return(cor(dd$sulfate,dd$nitrate,use="complete.obs"))
}
return(sapply(monitors, cor.function))
}
corr("specdata",150)
cr <corr("specdata",150)
cr <- corr("specdata",150)
summary(cr)
submit()
submit
getOutput
submit()
submit()
submit()
